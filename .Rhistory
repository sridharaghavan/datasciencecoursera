cube <- function(x, n) {}
cube <- function(x, n) {
cube <- function(x, n) {
}
library(datasets)
data("iris")
iris
split(iris, iris$Species)
lapply(split(iris, iris$Species), function(x) mean(x["sepal.Length"]))
lapply(split(iris, iris$Species), function(x) mean(x["Sepal.Length"]))
iris[Sepal.Length]
iris[1]
lapply(split(iris, iris$Species), function(x) mean(x[1]))
mean(iris[1])
mean(as.numeric(iris[1]))
iris[1]
class(iris[1])
class(iiris)
class(iris)
mean(iris["Sepal.Width"])
getwd()
setwd("D:/Sridhar/Coursera/Datasciencecoursera")
getwd()
x <- read.csv("./specdata/001.csv")
class(x)
head(x)
mean(x["ID"])
x["ID"]
mean(x["ID"])
x[4]
x[,4]
lapply(split(iris, iris$Species), function(x) mean(x[,1]))
iris
lapply(split(iris, iris$Species), function(x) mean(x[,1]))
data(mtcars)
mtcars
x <- tapply(mtcars$hp, mtcars$cyl, mean)
x
x[4]
x["4"]
lapply(mtcars$hp, mtcars$cyl, mean)
x["8"]-x["4"]
x <- c(1, 2, 3, 4, 5)
y <<- x
y
x
y <- x
y
x <- matrix(c(1,2,3,4), nrow=2, ncol=2)
x
y <<- x
y
y <- solve(x)
y
print()
print("cached data")
message("cached data")
class(print("x"))
class(message("x"))
class("x")
unclass("x")
xs
x
solve(x)
makeCacheMatrix <- function(x = matrix()) {
inverseMatrix <- NULL
set <- function(y) {
x <<- y
inverseMatrix <<- NULL
}
get <- function() x
setInverse <- function(x) inverseMatrix <<- x
getInverse <- function() inverseMatrix
list(set = set, get = get,
setmean = setInverse,
getmean = getInverse)
}
cacheSolve <- function(x, ...) {
inverseMatrix <- x$getInverse()
if(!is.null(inverseMatrix)) {
message("getting cached data")
return(inverseMatrix)
}
data <- x$get()
inverseMatrix <- solve(data)
x$setInverse(inverseMatrix)
inverseMatrix
}
x = rbind(c(1, -1/4), c(-1/4, 1))
m = makeCacheMatrix(x)
m$get()
cacheSolve(m)
m
cacheSolve <- function(x, ...) {
inverseMatrix <- x$getInverse()
if(!is.null(inverseMatrix)) {
message("getting cached data")
return(inverseMatrix)
}
data <- x$get()
inverseMatrix <- solve(data)
x$setInverse(inverseMatrix)
inverseMatrix
}
makeCacheMatrix <- function(x = matrix()) {
inverseMatrix <- NULL
set <- function(y) {
x <<- y
inverseMatrix <<- NULL
}
get <- function() x
setInverse <- function(x) inverseMatrix <<- x
getInverse <- function() inverseMatrix
list(set = set, get = get,
setInverse = setInverse,
getInverse = getInverse)
}
x = rbind(c(1, -1/4), c(-1/4, 1))
m = makeCacheMatrix(x)
m$get()
cacheSolve(m)
cacheSolve(m)
